plugins {
    id 'org.springframework.boot' version '2.2.2.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'
    id 'idea'
}

group = 'com.biblioteca'
sourceCompatibility = 11

repositories {
    jcenter()
    mavenCentral()
}

sourceSets {
    integrationTest {
        java.srcDir file('src/integrationTest/java')
        resources.srcDir file('src/integrationTest/resources')
        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath + sourceSets.test.output
        runtimeClasspath += output + compileClasspath
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security:2.2.2.RELEASE'
    implementation 'org.springframework:spring-jdbc:5.2.2.RELEASE'
    implementation 'org.mybatis:mybatis:3.5.3'
    implementation 'org.mybatis:mybatis-spring:2.0.3'
    implementation 'org.postgresql:postgresql:42.2.8'
    runtimeClasspath 'org.springframework.boot:spring-boot-devtools:2.2.2.RELEASE'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.2'
    testImplementation 'org.mockito:mockito-core:3.2.0'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.security:spring-security-test:5.2.1.RELEASE'
    testImplementation 'org.mybatis:mybatis-migrations:3.3.6'
    testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:2.1.1'
}

task createDb(type: Exec) {
    workingDir 'db'
    commandLine './create.sh', 'biblioteca'
}

task migrateDb(type: Exec) {
    workingDir 'db/migrations'
    commandLine './mybatis/bin/migrate', 'up'
}

task loadSeedData(type: Exec) {
    workingDir 'db'
    commandLine './load_sql_file.sh', 'biblioteca', 'sample_data.sql'
}

task createTestDb(type: Exec) {
    workingDir 'db'
    commandLine './create.sh', 'biblioteca_test'
}

task migrateTestDb(type: Exec, dependsOn: createTestDb) {
    workingDir 'db/migrations'
    commandLine './mybatis/bin/migrate', 'up', '--env=test'
}

test {
    useJUnitPlatform()
}

task integrationTest(type: Test) {
    systemProperty 'ENV', 'test'
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    mustRunAfter test
}

tasks.withType(Test) {
    testLogging {
        events "passed", "skipped", "failed"
    }
    useJUnitPlatform()
    outputs.upToDateWhen { false }
}

check.dependsOn integrationTest
integrationTest.dependsOn migrateTestDb
